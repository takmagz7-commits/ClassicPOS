You are a Senior AI Software Engineer auditing and fixing the ClassicPOS system.

Objective:
Execute and complete **Phase 1: Production Blockers** from the ClassicPOS Fix Roadmap.
Ensure authentication, database, and validation systems are stable, secure, and test-passing across all environments (Web + Android).

üü¢ SYSTEM DETAILS:
- Backend: Node.js + Express + SQLite (offline-first)
- Frontend: React + TypeScript (Vite)
- Database: SQLite (classicpos.db, local)
- Auth: JWT + bcrypt (PIN + Email/Password)

---

### üéØ PHASE 1 TASKS

1Ô∏è‚É£ **Fix Authentication Gaps (AUTH-001, AUTH-002)**
- Add authentication middleware (`authMiddleware`) to all sensitive routes:
  ‚Ä¢ `/api/products`
  ‚Ä¢ `/api/products/:id`
  ‚Ä¢ `/api/customers`
  ‚Ä¢ `/api/sales`
- Verify all protected routes return 401 without valid JWT.
- Add rate limiting to `/api/auth/pin-login` (max 5 attempts/minute) to prevent brute force.
- Ensure proper 429 error message after limit is exceeded.

2Ô∏è‚É£ **Database Initialization & Indexing (DB-001)**
- Confirm SQLite initializes correctly in all environments (web + Android embedded).
- Verify schema creation on startup with the following tables:
  ‚Ä¢ users (id, email, password_hash, pin, role)
  ‚Ä¢ sessions (token, user_id, expires_at)
  ‚Ä¢ products, customers, sales, roles
- Add foreign key indexes for all relationship columns (user_id, product_id, customer_id, sale_id).
- Test that database creation doesn‚Äôt throw migration errors.

3Ô∏è‚É£ **Validation & Error Handling (ERR-001)**
- Fix all routes returning 500 on user input errors.
- Ensure validation (Zod or Joi) runs BEFORE database calls.
- Return 400/422 for invalid or missing fields (e.g. empty product name, weak password).
- Sanitize all responses to prevent internal SQLite error messages from leaking.

4Ô∏è‚É£ **Basic Test Coverage (TEST-001 Partial)**
Add initial automated tests for:
  - Signup
  - Login (Email + PIN)
  - Logout
  - Access control for `/api/products`
Expected Results:
  ‚úÖ Successful signup returns 201
  ‚úÖ Authenticated product fetch returns 200
  ‚ùå Unauthenticated request returns 401
  ‚úÖ Rate limit triggers after 5 failed PIN logins
Use Jest + Supertest (backend) and React Testing Library (frontend).

5Ô∏è‚É£ **Deliverables**
- Fix and verify all Phase 1 issues.
- Generate and return a report including:
  ‚Ä¢ Authentication status summary
  ‚Ä¢ SQLite database initialization logs
  ‚Ä¢ Validation and response test results
  ‚Ä¢ Route protection verification
  ‚Ä¢ Files updated and changes applied

6Ô∏è‚É£ **Exit Criteria (PASS when all met)**
‚úÖ All API endpoints return correct status codes (200, 400, 401, 429)
‚úÖ SQLite DB auto-creates without manual setup
‚úÖ Authentication cannot be bypassed
‚úÖ Signup, login, logout flows pass end-to-end
‚úÖ Replit Test Report: "Phase 1 ‚Äî PASSED (Production Blockers Fixed)"

---

üì¶ Post-Fix Command Checklist:
- Run backend: `npm run server`
- Run frontend: `npm run dev`
- Run tests: `npm test`

Once all tasks are done, print a summary table:
| Module | Tests Passed | Fixed Issues | Status |
|---------|---------------|--------------|---------|
| Auth    | ‚úÖ             | AUTH-001/002 | OK |
| DB      | ‚úÖ             | DB-001 | OK |
| Errors  | ‚úÖ             | ERR-001 | OK |
| Tests   | ‚úÖ             | TEST-001 partial | OK |

Return the final result as **‚ÄúCLASSICPOS PHASE 1 COMPLETE ‚úÖ ‚Äî SYSTEM READY FOR STAGING.‚Äù**
