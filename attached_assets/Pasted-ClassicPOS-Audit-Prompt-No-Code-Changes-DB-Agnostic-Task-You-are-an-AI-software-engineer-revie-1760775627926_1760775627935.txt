ClassicPOS Audit Prompt (No Code Changes, DB-Agnostic)
Task:
You are an AI software engineer reviewing the ClassicPOS project. Your task is to scan the entire codebase ‚Äî frontend, backend, and configuration files ‚Äî and produce a detailed report of missing, incomplete, or broken parts. Do not modify any code yet.
________________________________________
üîç Objectives
Generate a comprehensive audit report identifying:
‚Ä¢	Unfinished or placeholder features
‚Ä¢	Missing business logic
‚Ä¢	Broken links or dependencies
‚Ä¢	Integration gaps
‚Ä¢	Environment or configuration issues
‚Ä¢	UI/UX inconsistencies
Focus on all modules, regardless of the database implementation (the database may be localStorage, IndexedDB, cloud, or any backend DB).
________________________________________
üß© Scope of Scan
Include but not limited to:
‚Ä¢	Frontend: src/ (components, modules, pages, hooks, utils)
‚Ä¢	Backend: api/, server/, routes/, controllers/, services/
‚Ä¢	Configuration: package.json, vite.config.ts, tsconfig.json, .env.example
‚Ä¢	Data Models: Any database schemas, models, or context-based storage
‚Ä¢	UI & Routing: Pages, navigation, responsive views
________________________________________
üßæ Report Should Include
1. Unfinished or Placeholder Features
‚Ä¢	Incomplete or stubbed modules, components, or pages
‚Ä¢	TODO, FIXME, console.log() placeholders
2. Broken Links or Dependencies
‚Ä¢	Missing imports or unused variables
‚Ä¢	Broken routes, missing components, or undefined functions
3. Incomplete Business Logic
‚Ä¢	Inventory workflows (PO ‚Üí GRN ‚Üí SA ‚Üí TOG, valuation, reports)
‚Ä¢	Checkout & payments (multi-payment, barcode, open orders)
‚Ä¢	CRM (customer data, leads, analytics)
‚Ä¢	Accounting (credit notes, debtors, reconciliation)
‚Ä¢	Settings, billing, subscriptions, receipt configuration
4. Integration Gaps
‚Ä¢	Missing API endpoints or incomplete data flow
‚Ä¢	Offline DB sync not connected
‚Ä¢	Authentication/session logic incomplete
5. Environment & Configuration Issues
‚Ä¢	Missing .env variables or misconfigured settings
‚Ä¢	Missing or outdated dependencies in package.json
6. UI/UX Issues
‚Ä¢	Broken navigation, inconsistent layouts, missing responsive views
________________________________________
üßÆ Output Format (Report Only)
1. Summary Table
Include:
ID	Severity	File Path	Issue Type	Description	Recommended Fix
2. Module Status Overview
Module	Status	Missing / Incomplete Parts
3. Observations
List global architectural inconsistencies, redundant code, unreferenced files, or broken workflows.
4. Next Steps (Suggestions Only)
Summarize what needs to be fixed or implemented. Do not apply any fixes.
________________________________________
‚öôÔ∏è Execution Rules
‚Ä¢	Do not modify any files ‚Äî report only
‚Ä¢	Include file paths and line numbers if possible
‚Ä¢	Assign severity levels:
o	P0 ‚Äì Critical, breaks functionality
o	P1 ‚Äì Major, missing required logic
o	P2 ‚Äì Minor, code inconsistency or cleanup
o	P3 ‚Äì Cosmetic/UI improvement
________________________________________
üß≠ Goal
Produce a single, structured audit report showing:
‚Ä¢	What‚Äôs missing
‚Ä¢	Where it‚Äôs missing
‚Ä¢	What‚Äôs required to complete each part
This report will guide future code generation or patching confidently.
________________________________________
Final Instruction:
Run the scan and return a structured report (JSON + readable summary) of all missing, incomplete, or broken parts in ClassicPOS. Do not modify any code ‚Äî report only.

